# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import os
import sys

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtGui import QFont, QIcon, QPixmap, QColor
from PyQt5.QtWidgets import QApplication, QFontDialog, QLabel, QFileDialog, QSizePolicy
from PyQt5.QtCore import QFileInfo

from search import searchKeyword
from search import botSearchKeyword
from threading import Thread
import threading
import ctypes
import time

class uiThread(QtCore.QThread):
    output = QtCore.pyqtSignal(str)

    def run(self):
        # do something
        return

    def get_id(self):
        # returns id of the respective thread
        if hasattr(self, '_thread_id'):
            return self._thread_id
        for id, thread in threading._active.items():
            if thread is self:
                return id
  
    def raise_exception(self):
        thread_id = self.get_id()
        res = ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id,
              ctypes.py_object(SystemExit))
        if res > 1:
            ctypes.pythonapi.PyThreadState_SetAsyncExc(thread_id, 0)
            print('Exception raise failure')

class uiThreadSearch(uiThread):

    def __init__(self, ui, text):
        uiThread.__init__(self)
        self.ui = ui
        self.text = text

    def run(self):
        try:
            result = botSearchKeyword(self.ui, self.text)
            self.output.emit(result)
        except:
            result = '''We are having trouble communicating with Google,
                please check your internet connection or try again later.'''
            self.output.emit(result)
        

class Ui_TabWidget(QtWidgets.QTabWidget):
    sig_keyhot = pyqtSignal(str)
    bot_output = pyqtSignal(str)

    def __init__(self):
        QtWidgets.QTabWidget.__init__(self)
        self.setupUi(self)
        self.retranslateUi(self)
        self.dialog_id = 0
        self.msgBoxes = list()
        root = QFileInfo(__file__).absolutePath()
        self.avatar = QPixmap(root + '\\avatar.ico')
        self.avatarBot = QPixmap(root + '\\avatarBot.ico')


    def setupUi(self, TabWidget):
        root = QFileInfo(__file__).absolutePath()
        self.setWindowIcon(QIcon(root+'\logo.ico'))
        TabWidget.setObjectName("TabWidget")
        TabWidget.resize(1280, 720)
        self.TabWidget = TabWidget
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.scrollArea = QtWidgets.QScrollArea(self.tab)
        self.scrollArea.setGeometry(QtCore.QRect(20, 20, 1240, 451))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1240, 451))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.verticalScrollBar().rangeChanged.connect(
                self.scrollToBottom, QtCore.Qt.UniqueConnection)
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.verticalLayout.setAlignment(QtCore.Qt.AlignTop)
        self.scrollArea_2 = QtWidgets.QScrollArea(self.tab)
        self.scrollArea_2.setGeometry(QtCore.QRect(20, 489, 1130, 181))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 1130, 181))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.textEdit = QtWidgets.QTextEdit(self.scrollAreaWidgetContents_2)
        self.textEdit.setGeometry(QtCore.QRect(0, 0, 1131, 181))
        self.textEdit.setObjectName("textEdit")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.pushButton = QtWidgets.QPushButton(self.tab)
        self.pushButton.setGeometry(QtCore.QRect(1150, 551, 110, 120))
        self.pushButton.clicked.connect(self.sendMessageUserFromTextEdit)
        self.pushButton.setShortcut('alt')
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_speak = QtWidgets.QPushButton(self.tab)
        self.pushButton_speak.setGeometry(QtCore.QRect(1150, 490, 110, 61))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_speak.setFont(font)
        self.pushButton_speak.setObjectName("pushButton_speak")
        self.pushButton_speak.pressed.connect(self.startVoiceRecording)
        self.pushButton_speak.released.connect(self.endVoiceRecording)
        # self.verticalScrollBar = QtWidgets.QScrollBar(self.scrollArea)
        # self.verticalScrollBar.setGeometry(QtCore.QRect(1250, 40, 16, 160))
        # self.verticalScrollBar.setOrientation(QtCore.Qt.Vertical)
        # self.verticalScrollBar.setObjectName("verticalScrollBar")
        TabWidget.addTab(self.tab, "")

        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.pushButton_2 = QtWidgets.QLabel(self.tab_2)
        self.pushButton_2.setGeometry(QtCore.QRect(340, 233, 300, 55))
        self.pushButton_2.setObjectName("pushButton_2")
        self.comboBox = QtWidgets.QComboBox(self.tab_2)
        self.comboBox.activated.connect(self.setFontFamily)
        self.comboBox.setGeometry(QtCore.QRect(660, 233, 300, 55))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItems(['Arial', 'Courier New', 'TimesNewRoman'])

        self.pushButton_3 = QtWidgets.QLabel(self.tab_2)
        # self.pushButton_3.clicked.connect(self.setFontSize)
        self.pushButton_3.setGeometry(QtCore.QRect(340, 133, 300, 55))
        self.pushButton_3.setObjectName("pushButton_3")
        self.comboBox_2 = QtWidgets.QComboBox(self.tab_2)
        self.comboBox_2.activated.connect(self.setFontSize)
        self.comboBox_2.setGeometry(QtCore.QRect(660, 133, 300, 55))
        self.comboBox_2.setObjectName("comboBox")
        self.comboBox_2.addItems(
            ['8', '10', '12', '14', '16', '18', '20', '22'])
        self.comboBox_2.setCurrentIndex(2)

        self.pushButton_4 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_4.clicked.connect(self.setAvatar)
        self.pushButton_4.setGeometry(QtCore.QRect(340, 333, 620, 55))
        self.pushButton_4.setObjectName("pushButton_4")
        TabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.textBrowser = QtWidgets.QTextBrowser(self.tab_3)
        self.textBrowser.setGeometry(QtCore.QRect(25, 90, 1221, 201))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.textBrowser.setFont(font)
        self.textBrowser.setObjectName("textBrowser")
        self.label = QtWidgets.QLabel(self.tab_3)
        self.label.setGeometry(QtCore.QRect(600, 30, 80, 40))
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setTextFormat(QtCore.Qt.AutoText)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.tab_3)
        self.label_2.setGeometry(QtCore.QRect(480, 440, 620, 40))
        self.label_2.setObjectName("label_2")
        TabWidget.addTab(self.tab_3, "")

        self.retranslateUi(TabWidget)
        TabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(TabWidget)

    def setAvatar(self):
        filename = QFileDialog.getOpenFileNames(
            self, 'Select an image', os.getcwd(), "Image Files(*.ico *.jpg *.png *.bmp)")
        print(filename)
        self.avatar = QPixmap(filename[0][0]).scaled(50, 50)

    def retranslateUi(self, TabWidget):
        _translate = QtCore.QCoreApplication.translate
        TabWidget.setWindowTitle(_translate("TabWidget", "CSC3180 Project Chat Bot"))
        self.pushButton.setText(_translate("TabWidget", "Send"))
        self.pushButton_speak.setText(_translate("TabWidget", "Speak"))

        TabWidget.setTabText(TabWidget.indexOf(self.tab),
                             _translate("TabWidget", "CHAT"))
        self.pushButton_2.setText(_translate("TabWidget", "Set Font"))

        self.pushButton_3.setText(_translate("TabWidget", "Set Font Size"))

        self.pushButton_4.setText(_translate("TabWidget", "Set Avatar"))
        TabWidget.setTabText(TabWidget.indexOf(self.tab_2),
                             _translate("TabWidget", "SET"))
        self.textBrowser.setHtml(_translate("TabWidget", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"> Developed by Mingzhuo Yang (118020068), Wei Wu (118010335), and Tao Pan (119010239) </p></body></html>"))
        self.label.setText(_translate("TabWidget", "About"))
        self.label_2.setText(_translate(
            "TabWidget", "CSC3180 Project - Chat Bot"))
        TabWidget.setTabText(TabWidget.indexOf(self.tab_3),
                             _translate("TabWidget", "INFO"))

        # Set Font
    def setFontFamily(self):
        text = self.comboBox.currentText()
        fontDict = {'Arial': 'Arial', 'Courier New': 'Courier New',
                    'TimesNewRoman': 'TimesNewRoman'}
        font = QtGui.QFont()
        font.setFamily(fontDict[text])
        self.TabWidget.setFont(font)
        self.resetDialog()

    def setFontSize(self):
        text = self.comboBox_2.currentText()
        font = QtGui.QFont()
        font.setPointSize(int(text))
        self.TabWidget.setFont(font)
        self.resetDialog()

    def sendMessageUser(self, text):
        self.addDialog("User", text)
        # TODO: send the user input to AI

        # Use thread to call bot
        try:
            # If the thread is running (bot is processing the previous task)
            # Tell user that it is busy and ignore the new input
            if self.t.isRunning():
                # self.t.raise_exception()
                msg = 'I am still thinking about \'' + self.input_buffer + '\', please wait a minute.'
                self.sendMessageBot(msg)
            # If the bot is not busy, start a new task
            else:
                text = text.replace('\n', ' ').replace('\r', ' ')
                self.input_buffer = text
                #self.t.output.disconnect(self.sendMessageBot)
                self.t = uiThreadSearch(self, text)
                self.t.output.connect(self.sendMessageBot)
                self.t.start()
        # If self.t is not defined (the first task)
        # Start a new task
        except:
            text = text.replace('\n', ' ').replace('\r', ' ')
            self.input_buffer = text
            self.t = uiThreadSearch(self, text)
            self.t.output.connect(self.sendMessageBot)
            self.t.start()

    def sendMessageUserFromTextEdit(self):
        text = self.textEdit.toPlainText()
        self.textEdit.clear()
        self.sendMessageUser(text)
        
    # TODO: AI sends output to here
    def sendMessageBot(self, text):
        self.addDialog("Bot", text)

    def addDialog(self, sender, text):
        chatBlock = QtWidgets.QLabel()
        avatar = QtWidgets.QLabel(chatBlock)
        avatar.setGeometry(10, 10, 50, 50)
        avatar.setAlignment(QtCore.Qt.AlignCenter)
        avatar.setScaledContents(True)
        msgBox = QtWidgets.QTextBrowser(chatBlock)
        if sender is "User":
            msgBox.setAutoFillBackground(True)
            p = msgBox.viewport().palette()
            p.setColor(msgBox.viewport().backgroundRole(), QColor(149, 236, 105))
            msgBox.viewport().setPalette(p)
            avatar.setPixmap(self.avatar)
        else:
            avatar.setPixmap(self.avatarBot)
        msgBox.setGeometry(QtCore.QRect(70, 0, 1170, 451))
        msgBox.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        msgBox.setObjectName("msgBox"+str(self.dialog_id))
        msgBox.append('{}'.format(text))
        boxHeight = msgBox.document().size().height() * (msgBox.document().lineCount() + 0.1)
        if boxHeight < 70:
            boxHeight = 70
        # print(boxHeight)
        msgBox.setMinimumHeight(boxHeight)
        msgBox.setMaximumHeight(boxHeight)
        self.msgBoxes.append(msgBox)
        chatBlock.setGeometry(QtCore.QRect(0, 0, 1240, 451))
        chatBlock.setMinimumHeight(boxHeight)
        chatBlock.setMaximumHeight(boxHeight)
        self.verticalLayout.addWidget(chatBlock)

    def resetDialog(self):
        for msgBox in self.msgBoxes:
            boxHeight = msgBox.document().size().height() * 1.05
            if boxHeight < 70:
                boxHeight = 70
            print(boxHeight)
            msgBox.setMinimumHeight(boxHeight)
            msgBox.setMaximumHeight(boxHeight)
            msgBox.parentWidget().setMinimumHeight(boxHeight)
            msgBox.parentWidget().setMaximumHeight(boxHeight)

    def scrollToBottom(self):
        scrollBar = self.scrollArea.verticalScrollBar()
        scrollBar.setValue(scrollBar.maximum())

    # TODO: Voice recognition interface
    def startVoiceRecording(self):
        #print("Start voice recording")
        return

    def endVoiceRecording(self):
        #print("End voice recording")
        msg = ""
        self.sendMessageUser(msg)
        return

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Ui_TabWidget()
    ex.show()
    ex.setFontSize()
    app.exec_()
